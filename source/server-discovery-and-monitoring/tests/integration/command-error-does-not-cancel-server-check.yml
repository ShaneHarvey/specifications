# Test SDAM error handling.
runOn:
  # Require 4.4 for streaming
  - minServerVersion: "4.4"

database_name: &database_name "sdam-tests"
collection_name: &collection_name "commandErrorDoesNotCancelServerCheck"

data: []

tests:
  - description: Command error does not cancel server check
    clientOptions:
      retryWrites: false
      heartbeatFrequencyMS: 2000
      # Server selection timeout MUST be less than heartbeatFrequencyMS for
      # this test. This setting ensures that the retried insert will fail
      # after 1 second if the driver does not properly cancel the in progress
      # check.
      serverSelectionTimeoutMS: 1000
      appname: cancelServerCheckTest
    operations:
      # Perform an operation to ensure the node is discovered.
      - name: insertOne
        object: collection
        arguments:
          document:
            _id: 1
      # Configure the next inserts to fail with a command error that marks the
      # server unknown but not cancel the in progress isMaster check.
      - name: configureFailPoint
        object: testRunner
        arguments:
          failPoint:
            configureFailPoint: failCommand
            mode: { times: 1 }
            data:
                failCommands: ["insert"]
                closeConnection: false
                errorCode: 91
      - name: insertOne
        object: collection
        arguments:
          document:
            _id: 2
        result:
          errorCodeName: ShutdownInProgress
      - name: insertOne
        object: collection
        arguments:
          document:
            _id: 3
        error: true  # Server selection timeout.
      # The first error should mark the server Unknown and then clear the pool.
      - name: waitForEvent
        object: testRunner
        arguments:
          event: ServerMarkedUnknownEvent
          count: 1
      - name: waitForEvent
        object: testRunner
        arguments:
          event: PoolClearedEvent
          count: 1
      # Perform another operation to ensure the node still selectable.
      - name: insertOne
        object: collection
        arguments:
          document:
            _id: 4
        result:
          insertedId: 4
      # Assert the server was marked Unknown and pool was cleared exactly once.
      - name: assertEventCount
        object: testRunner
        arguments:
          event: ServerMarkedUnknownEvent
          count: 1
      - name: assertEventCount
        object: testRunner
        arguments:
          event: PoolClearedEvent
          count: 1

    expectations:
      - command_started_event:
          command:
            insert: *collection_name
            documents:
              - _id: 1
          command_name: insert
          database_name: *database_name
      - command_started_event:
          command:
            insert: *collection_name
            documents:
              - _id: 2
          command_name: insert
          database_name: *database_name
      - command_started_event:
          command:
            insert: *collection_name
            documents:
              - _id: 4
          command_name: insert
          database_name: *database_name

    outcome:
      collection:
        data:
          - {_id: 1}
          - {_id: 4}
